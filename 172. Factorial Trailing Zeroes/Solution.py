"""
要在末位产生0，则必然是5×2，即使是原数中包含的0也可以分解，因此将题目简化为寻找阶乘中5的个数，即n//5，但是要考虑到这只找到了n中是5倍数的所有数，例如25，即在25!中找到了5个是5的倍数的数分别为5,10,15,20,25，要注意这之中的25依然可以分解为5的倍数，因此n//5其实是少计入了一部分情况的。

要对接下来的这部分情况进行统计，我们可以对n取25的商，即n//25，这样就找到了包含有2个5的数（且因为是对5×5取商，没有重复计入），依此类推，可以循环对n取5, 25, 125...的商，将所有的情况都包括，最终将所有的商汇总即0的个数。

n // 25 == n // 5 // 5，因此可以对n循环取5的商，其效果是一样的。
"""

class Solution(object):
    def trailingZeroes(self, n):
        """
        :type n: int
        :rtype: int
        """
        #因数有几个5就行
        
        #对n循环取5的商---log（n）
        
        res=0
        while n>=5:
            res=res+n//5
            n=n//5
            
        return res
